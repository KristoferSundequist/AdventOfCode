use std::collections::{HashMap, HashSet};

fn main() {
    let input = ">><<<<>><>><>><<>><<<<>><<<<>><<<>>><<>><>>><<<<>>>><<>><<<>>>><<>><<>>><>><<>>><<<<>><>>><<>><<>>><<<><>><<><<<<>><>>><<>>><<>><<<><<><<<>>>><<>>>><<<<><<<<>>><<<<>>><>><<<><>>><<<<>>>><<<>>><<<<>>>><>>>><<><<<<>>>><<<<>><<<<><<><<>>>><>>>><<<<>><>>><<<>>><<><<<>>>><<>><>>><>>><<><<>>>><<>><<>>>><<>>>><<<>>><<<>>><<<<>><<>>><>>>><>>>><<>>>><><<><<<<>>><<>><<<<>><<<<><<<<><<><<><>><<><<<><<<>>><<>>><<>><>>><<>>>><><<>><<<<><<<>>>><<<<>>>><<<<>>><<<>>><>>><<<<><<>>>><<>>><>><<<>>><<<>>><>>><><>><<<<>>><<<>>><>>>><<<<><><<<>>><<<>>><<<>>><<<>>>><<<>>><<<<><<<>>>><<<>><>>>><><>>><<<>><<<>>><>>><<<><<>><>>><<<<>><<<>>>><>><>>>><>>><<<<>>>><<>><<<><<>>><<>>>><<<<><<<>>>><>><<>><<<<>>><<><<<<><<<>><<<><>>><<>>>><<<<>><<>>>><<><>>>><<<>>><<<<><>><<>>>><>>><>><<<>><<<>>><<>>>><<<>>><>><><<<>><><<>>>><<<<>>>><<>>><<<<>>><<<>><>><><<>>><<<>>><<<><<>><<>>>><<<>><<>><<<<>>>><<<><<>>><>>><<<<>><><<<>><<<>><<><<>><<<>>>><<>>>><><<<>>>><<<><<><>>>><<<<>>>><>>><<<>>><>>>><<<<><><<><<<<><<<<>>><<><<<>>><<<><<<<>>>><<<>>><<<><>><>>>><>><<><<<<>>>><>><<<<>><<>>>><<>>>><<<<>>>><>>><<<<>>><<><<<>><<<<>>>><<<>><<<<>>>><<<<><<><>><<<>>><<<<>>><<<<>><<<>><<<>><<>><<<>><<<<>>><<<<>>><<>>><<<<>>>><<><<<>><>>><<<>>><<<>><<><>>><<><<>>>><<>>>><>>><>>><<<<><<>>><>>>><<<<><<<>>><>>>><>>><<<<>>>><>>>><><<>>><<<<>>><<>>><<<>>>><<<>>>><<<<>><><<>><<<>><<<>><<<<>>><<<<>><<<>>>><<>>><<<>>><>>>><<<<>>>><<>><>><<<<>>>><<<<>>>><<>>><<<>>><<<>>>><<>>>><<>><<>>>><<>>>><<<<><<<<>>>><<>><<>>><>>><<<><<<>>><<><<<<>>><<<>>><<>>>><<<><<<>>>><><<<>>><<<<><<>>>><<<>><>><<>>><>>><<<>>>><>>>><<<>><<>><<<<><<>><<<<>><<<<><><<<<>>><<<>>>><<<<>>><<<>>><<<>>>><>>><><>>><<>>><>>><<<><<<>><<>><<<<><<>>><<>>>><>>>><><<<<><<>><<<<>>><>><<>><<<<>><<<>>>><<<<>><<<>>><>>>><>><>><<<<>><>>>><>>>><<<>><<<>>>><<>><<>>><<<<><<<<><<>>>><<<<>><<<>>><<>>><><<<><<<>>>><>>>><>><>>><>>><<<<>>>><<<>>><>>>><<<<>>><<><<<><<>>><<><<<<>><>>><<><<<>>><<<<>><<><<<<>>>><<<><><<><>>><<<>><<<<><<><<<<>><><>>><>>>><<<<>><<<><<<>><<><<>><<<><<>>>><<>>>><<<<>>>><<<>>>><<>><>>><<>>><<<<><><<><<>>>><<<<><<<<><<<>>>><<<>>>><<>><<<>>>><<>>>><<><<>>>><>>>><<<>>><<<>><<><<>>><><><<<<>><<<>><<<>><>><<<>><<>>>><<<<>><>><<<<>>><<<<>>>><<<>>>><>><<<<>>><<<<><<<><<<<>><<<>>><<>>><<<<>><>>>><<>>>><<<>>><><>>><<<>>>><<<>>>><<<>>><>>><<<>>>><<<<>><<<<><<<<>>><<<<>><<>><>>><<<<><<><<<<>><><<>><<<<>>>><>>>><><<<<><>><<<<>>><>><<<<>><<<<>>><<><<<>><>>><<<>>><<<>>><<<>><>>>><<>>><<><<>><<<>>><<<<><<>><<<>><<><>><<>><>>>><>>><<<>>>><<<>>>><<<>><>><<<<>>><<><<>>><>>><<<<>>><<<><<<>>><>>>><<>>>><<>>><<<>><<<>><<<>>>><<>><<<<>><<>>>><<<<>>>><<>>>><<<<>>>><<>>><<<<>><<<<>><<<>>>><<<<>>><<<<><<<>>><>>>><<<<>><<<>>><<><<<>>><<<<>>>><<<<>><<>>><<<>><>>><<<>>>><<<><<<>>>><<><<<<>>>><>>>><<<<><<><<<<>><<<<><><>>><><<<<>>>><<<<><<>>>><<<<>>>><<<><<>>><<>>><><<<<>>><<>><<<>><<<<>>><<><<<>>><<>><<<><<<<>>>><>><<<>><>>><><<>>><<<<>><<><<>>><<>><<>>>><<><<>>><<<<>>><<>>><>><>>><<>><<<<>>><><<<>>>><<<<>>>><<<>>>><>>>><<><<<<><<><>><>><><<<<>>><<>><<<<><<<<>>>><><<<<><<>><<><<><<<>>><><<<>>><<<<>>>><><<>><<>>>><<><<>>>><<<<><<<><<>>><<>>>><<<>><<<>>>><>>><<>>>><<<<>>><><<<>><<<<>>><<<<>><<<>><<<<>><>>>><><>>>><<<>>>><<>>>><<><<>>><>>>><<>>>><<>><<><><<<<>><<<>><<<>><<<>>>><<<<>><<<<>><<<><<<><>>><><<>><<<>>><>>><<<>>><><>><<<<>>><>>><<>>>><>>>><>><<<<>>><<<><<<<><><<<>>><<>>><><<<><<<<>>>><>>>><<<<>>>><<<><<>><><<<<><>><>>><>>><<<<><><<<>>><<<<>><<<<>><<<><<<<>>><<>>><<>>>><<<>><<<<><<<<>>><>><<><<<<>>>><<<>>><<>>><<<<>><<<>>><>>><<<<>>><<<<>>><<<>>>><>><<<>>>><<><<><<<<>><<><<<><<<<>><<>>><>>>><<><>><<<>><<<<>><<>><>>>><<<<>>>><<>>>><<>>><<><<<><<<><<<<>><<<<>><<>>>><>>><>><<<>>><<<>>>><<<<>>><<<>>><<<<>>>><<<>>><>><<<<>>>><<<>>>><<<<>>>><<>>><<><<>>><<<>>><>><<<<>><<>>><<<>>><<>>><<>><>>>><<<><<<<><<>>>><<><<<<><<<><<<>><<<><><<<>>>><>><<><<<<>>><>>><<<<><<>><<<<><<<<>><<>>><<>>><>>>><<>><<<<>><>>>><>>><>>><<>>><<<<>><><<<>>>><<<<><<<<>>>><<<>><<><>>><<>>>><<<<>>>><<>><<>>><><<<<>><<<>>><<<>><<>><>><<<<>><<>><>>><<<>><><<<>>>><<<<>><<>><<<>><<<>>>><>><<<><<<<>>><<<>>><<<>>><<>><<<<>><>>><<>>>><<<><<<<><<>>><>>><>><<<<>><<><<<<><<<<>>>><<<>>>><<<>>>><<<><<>>><<>>><<<>>><>>><<<<>>><<<<>>>><<><<<<>><>>><>>><<<>>><<<<>>>><>>>><<<>>>><<><><<>><<<><<<>>>><<<><<<>>><>><<<<>><<<<>>><<<>>>><<<>><<<><<<<>>><<<<>>>><<>>><>>>><<<><<<<><<<>>><<>><<<>>><>>>><<<<>>>><<<<><<<>>>><<><>>>><<>>><<>>>><<><<<<><<<<>><<<<>>><<<<>><>><<<>>>><<>><>><>><<>>><<<>><<<><>>><<<<>>>><<<>>>><<<>>>><<>>>><>>><<<>>><<<<>><<<>>>><<>><<>>>><>><<<<><<>>>><<<<>><<<<>><<<>>>><>>><<>><><<>>><<><<>><><<<<>>>><<<<>>>><<>>>><<<>><<<<><>>>><<>><<<<>>><<>>><<<>><<<>>><<<<><<<>>>><>><><>>>><<<>>><<<<><<<<>>>><<<>>>><<<<>><<><<<<>>>><>><<<>>><<<>>>><>>><<<<>>><<<<>><<<<>><<<<><<<<>>><<>>>><<<<>>><>>><<>>>><>><<>>><<>>><<<<>>>><<<<>><<<><>>><<<>><<><>><<<><<<<>>>><<<>><><<<<><<<<><>>>><>>><<>><>>><><<<<>>><><<<><<><<<>>><><<<>>>><<><<><<<>>><<<><>><>>><<<><<<<>>>><<<>><<<><<<<>><<<<><<<<>>><<<>>>><<<<>>><><<<>><<<<>>><>>>><<<>>><<>>><<<>>><<<<>>><<<<><<<>>><<<<><<<<>>>><<>>><<<<>>><<>><><>><<><>><<<>>><<>><>>><>><<<><>>><><>>>><<<><<<>>><<>>><><<<<>>>><<<><<<>>>><<<<>><<>>>><<<<>>><<<<>>>><<>><<<>>><<<><<>>>><<<>><<<<><<>><<<<>>><<>>><<><>>><<>>>><<<<><<>><<<<>>><<<<>>><<<>><<<>><<><<<<><<<<>>>><><<<>><<>>>><<<><<<<>><<>>>><>>><<>>><<>><<>>>><<<<><<><<<<><<<<>>>><<<<><<>>><<<><<<<>>><>>><<<>><<<<>>><<<<>>>><>>>><>>><<<>>><<<<>>>><>><<<<>><<<<>><<<>>>><>>><<<<>>><<>><<<<><>>>><>>>><<>><<<<>><><<<<>><>><<<>>><<<>>>><<<><><<>>>><<><<<>>><<>>>><<<><<<<>><>>><>><<><>><<>>>><<<><<<<>><><>>><>>><<>>>><<>>>><<<<><<>>>><<<>>><<>><<<<><<>>>><<><><><<><<<<>><<<>>><<><<<>><<<><<<>>>><><<>>><<<<><<><>>>><<<<>>>><<<><<>>><<<>>><<<>>>><<<>>><>><<>>>><<<>>><<<><>><>>>><<<<>><<>><<>><<<>><<>>>><>>>><>><><<>><>>>><><>>>><>><<>><<><<<>>><<<>>>><>>><<<><<<>>><>>><<<<>>><<>>>><<<>>><<<<>>><<<><<<<>>>><<>>><<<<><<<>>>><<><<<<>>><<>>><<<>><>>><<<<><<>>>><>><>><<<>>>><>>><<<>><<><<><<><<<>><<<><>><<<>><<<><>><>>>><<>><>>><<<<>>>><<><>>><<<>>>><<<><><<>>>><<<>>><><<<<>>>><<>>>><>>>><>>><<<>>>><<>>><<>>>><<<<>>>><<<>><<<<>>><><><>>>><<<<>>>><<<>>><<>>>><<>><<>>><>>>><<<<>>><><<><<<>>>><<><<<<>>><<>>><<<<>><<<><<>>><<<<>><<>>><><<>>>><<<>><<<>>><<<<>>><<<>><<<<><<>><<<<><<><<<><<<>>>><>><<<<>>>><>><<<>>><<>>>><<>>>><<><>>>><<<<>><<<><<>><<<<>>><<<>>>><<><>>>><><<<<><<<<>>>><<<<><<<<>>><<<<><<><<<<>><<<><<<<><<>>>><<><<>>><<><<<>>><>>>><<><<<>>>><<<>>>><<<>>><<>><<<><<<<><<><<<>>>><>><<>>><><<<>>>><<<>>>><<<<>><<>>><<<>>><<<>>>><>>><>>><<>>>><<<><>><>>>><<<><<<><<<><<>><<<<>>>><<<<>>>><<<><<<>>>><<<>>>><>>>><><>>>><>><<>><<<<>>>><<>>><<<>><<<>>>><<<>><<>><<<>><<<>><<>>><><<>><<<>><<<<>><<<<>><<<<>>><>>><<<<><>><><>>><>>>><<<>>>><<>>>><<<<>><<<>><<>>><>>>><<<<>>><<<>>>><<>>>><<>><>>>><<<<>>><<>>>><>><<>>><<<<>>>><>>>><<>><<><<<>>><>><><<<<>>>><<<<><>>>><<>>><<<<>><<<><<>>><<<<><<<<>>>><<<<><<>>>><>>><<>><<><>><<<<><>><<<<>><<<<><<<><<><<>>><<<<>><>>><><><<<<><<<>>><>>><>>><>><<<<>>>><<<<><>>><<>><<>>><>>>><<<>>><<>><>><<<<>>>><<<>><>><<<<>>>><<<><<<>>><><<<<>>><>>>><<>><<<>>>><<<<><<<<>>><<<<>>>><<<<>>><<<>><><<<>><<>>>><<><><<<<>>><<>><<<>>><<<<>><<<<>>>><<<<>>><<<>>>><>>>><><<>>>><<<>><<<<>><<<>>><<<><>>><<<>>>><<>><<<>><<<<><>>><<<<>>>><>>>><<><>><<<<><<<>>><>>><<>><>><><<<<><<<<>>><<>>><><<<<>>>><<<>>>><>>><<>>><<<<>>><<>>>><<>>><<>>><<<>>>><<>>><<<><>>><<<>>>><<><<<<><<<<>>><<<>>>><<<<>>><<>><<>><<><<<><<<<>><<<>><><<>><<<<>>>><<<>><<<>>>><<<<>><>>><<<<><<<>><<>>>><<>>><>><<<>>><>>>><<<<>>><<<<>>><<>>><<>><<>>>><<<<>><>><>>><>>><<<>>><>><<<<>>><>>>><<>><<<<>>>><<<<>>><<<<>>><<<<>>>><><<>><<>>>><<<<><<>>>><<<>>><<<<>><<<<><<><<>><<<<>>>><<<>>><<<>>><>>><<<<>>><<><<<><<><<<><<>>>><><<>>><<<<>><<<>><<<<>>>><<<>>><>><>>><<<>>><<>><><<>>><<<<>>>><<<>>>><<<>>><<>>>><<<<><<><<>>>><><<<<>>>><>>>><<<>>><<<<>><<>>>><<<<>><<>><<>><><>>><<<><<<>>><><<<<><<>>>><<>><<><<<<>>><<<>><<>>>><<>>>><>>><<<><<<<>>>><<>><>><<<><<<>>><>><>><>><><<>>><>><>><<>>>><<>>>><<<<>>>><<<><>><>>><<<>><<<><>>><<<>>><<><<<><<<><<>>><<<<>><<<>>>><<>>><>>>><<>>><<<<>>>><<>>>><<>>>><<>>><<<>>>><<><><>><<<>>>><<<>>>><<<<>>><<<>><<<><<><<<<>>><<<<>><<<>>><>>><><<>>><>>><<<<>><<<<>><<<>><<<><<>><<<<><<>>><>>>><><<<<><>>><<>>>><<<>>>><<>><>><>>><<>><<<<>>>><<<<>><<<<>><<<>><<<>>><<>>><<><>>>><<><<<>>>><<>>><<<<><<<>><<><<<<>>><<>>>><<<<>><<<<>>>><<<<>><<>>><<<><<>><<<<>>><>>><<><<>>>><>><<<>>>><<>>><<><>>>><<>>><<<<>><<>><<<><<>>>><<<>>>><<<<>><<<<><<<<><<<>>><>>><>>><<<<>><><<<<>>>><<<>><<><<><<<>>><>><<<<>>><<><<<>>>><<>>>><<<<>>><><<<<><><<<<><<<>>>><<>><<<<>>><<<><<<<>><<<<>>>><<<>>>><<<>>><<>>><<<>><<>>><<>><<><><<<>><>>><<<<>>><<<<>>><<><><<><<>>><>><><><<<><<>><<>>><<<<>>><<<>>><><<<>>>><<<<>>>><<>><><<<><<<<>>>><>>><<<>>><<<><><<<<>>>><<>>><><<<<>><<<<>>><><<<<>>><<>><<<<>><<>>><<<<>>>><<<<>>>><><<>>><<><<<<><<<<>><<<<>>><><>><<<<><<><<>>><<<<>>>><<<<>><<<<><>><<<<>>><><<<>><>><<<<>>><<<<>><<>>>><<<>>>><<<>><>>>><>><<<<><>><<<<>>>><<<<>>>><<>>>><<<<>><>>><>>><>><<<>>><<><<<>>><><<<<>>>><><>>>><<<>><<<>><<>><>><>>><<<<><<<<>>>><>>>><<>><<<>>>><<<<>>><<<>>>><<><><<<>><<<<>>>><>><<>>>><<<>>>><<<><<>><<<><<<<>>><<<<>><>>><>>>><<>>><<<<>>><<<>>>><<<>>>><<<>>>><<><>>>><<>>>><><<<>>>><<<>>><>>>><>>><<><<>>><<>>><<><<<<>>><<<<>>>><<<<>>>><>>><<<>>><>>>><<><<<<>>><<<<>>>><<><<<<>><<><<<>>>><><>>>><<>>><<>>><>><<<<>><<<<><>>>><<<>>>><<<>><<<<>>><<<<>><<<<>>><>><<>><>>><<>>>><<><><<<>>><<<>><<<<>>><<><<<<>><<<>>>><<>>>><>><>>>><<>>><><>>>><>>>><<<>><<>><>><>><<<<><<<>>><<<>>>><<>><<><<<<>>><>><>>><>><><<<>><<<>>><<<>>>><<<<><<<>>><><>><<<>>><<<>>>><>>><<><<<<>><><<<><<<>>><<<<><<>>><>>>><<<<>>>><<<<><>><<><>>>><<>>><>>>><<<><>>><<<><<<<>><<<>><><<<>><><<>>><<>>>><>>><<>>>><<<<>><>>><>><<<>>><><<>>><<<<>><>>>><<<>><<<><><<><<<>>><>><<<>><<<<>><<>>><<<<><<>>><<<>><>><<<>>><<>>>><<<><<<>><<>>><<>><>>>><>><<<<><<<><<<<>><<>>>><<>><<<>>>><<>>><<<<>><>>><>><<<>>><<<>><<<<>>><>>><>>><<<<>>><<>>><<<>><<><<<>>><>>><<>>><<<<>><<>><><<<<><><<<<>>>><<<<><<<<><<<>>>><<<<>><<><<<>><<><>><<<<>>><<<>>>><<<<>><<>>><<<><<<<><>>><<<>>><<<<>><<<<>><<<<>>><<<<>>><<><<<<>>><<<><<>>>><<<>>><<<>><<<>><><<<>>><<>>><>>>><<<<><>>>><>>><<<<>>><>>><>><<<>>";
    //let input = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
    let move_sequence: Vec<char> = input.chars().collect();
    let rock_sequence = vec![
        Shape::HorizontalLine,
        Shape::Cross,
        Shape::L,
        Shape::VerticalLine,
        Shape::Box,
    ];
    let mut rocks: HashSet<Point> = HashSet::new();
    let mut move_sequence_cursor: usize = 0;
    let mut rock_sequence_cursor: usize = 0;
    let mut top_pattern = TopPattern::new();
    let mut pattern_cache: HashMap<State, Stats> = HashMap::new();
    let mut additions: u64 = 0;

    let total_rocks: u64 = 1000000000000;
    let mut rock_i = 0;
    let mut pattern_used = false;
    loop {
        if rock_i >= total_rocks {
            break;
        }
        let current_state = State {
            top_pattern: top_pattern.get_pattern(),
            move_cursor: move_sequence_cursor,
            rock_cursor: rock_sequence_cursor,
        };
        if pattern_used == false {
            if let Some(last_time) = pattern_cache.get(&current_state) {
                let pattern_length = rock_i - last_time.index;
                let top_y_diff_for_pattern = top_pattern.current_top - last_time.top_y;
                println!(
                    "Found it! Pattern index length: {}, y_diff: {}",
                    pattern_length, top_y_diff_for_pattern
                );

                let index_before_pattern = rock_i - pattern_length;
                let num_times_to_use_pattern =
                    (total_rocks - index_before_pattern) / pattern_length;

                additions =
                    num_times_to_use_pattern * top_y_diff_for_pattern - top_y_diff_for_pattern;
                rock_i = index_before_pattern + num_times_to_use_pattern * pattern_length;
                pattern_used = true;
                continue;
            }
        }
        pattern_cache.insert(
            current_state,
            Stats {
                top_y: top_pattern.current_top,
                index: rock_i,
            },
        );
        let start_y = top_pattern.current_top + 4;
        let mut current_rock = get_new_shape(&rock_sequence[rock_sequence_cursor], start_y);
        rock_sequence_cursor += 1;
        if rock_sequence_cursor >= rock_sequence.len() {
            rock_sequence_cursor = 0;
        }
        loop {
            // Move first
            let mv = move_sequence[move_sequence_cursor];
            move_sequence_cursor += 1;
            if move_sequence_cursor >= move_sequence.len() {
                move_sequence_cursor = 0;
            }
            let maybe_moved_shape = if mv == '<' {
                get_moved_shape(&current_rock, &rocks, true)
            } else {
                get_moved_shape(&current_rock, &rocks, false)
            };
            if let Some(moved_shape) = maybe_moved_shape {
                current_rock = moved_shape;
            }

            // Then down
            let maybe_downed_shape = move_shape_down(&current_rock, &rocks);
            if let Some(downed_shape) = maybe_downed_shape {
                current_rock = downed_shape;
            } else {
                for p in current_rock {
                    top_pattern.update(&p);
                    rocks.insert(p);
                }
                break;
            }
        }
        rock_i += 1;
        // println!("---------------- after: {rock_i} ------------------");
        // println!("num rocks: {}", rocks.len());
        // draw(&rocks);
    }
    println!("{}", top_pattern.current_top + additions);
}

#[derive(Clone, Debug, Hash, Eq, PartialEq)]
struct Stats {
    top_y: u64,
    index: u64,
}

#[derive(Clone, Debug, Hash, Eq, PartialEq)]
struct State {
    top_pattern: Vec<u64>,
    move_cursor: usize,
    rock_cursor: usize,
}

#[derive(Clone, Debug, Hash, Eq, PartialEq)]
struct TopPattern {
    top_ys: Vec<u64>,
    current_top: u64,
}

impl TopPattern {
    fn new() -> TopPattern {
        TopPattern {
            top_ys: vec![0, 0, 0, 0, 0, 0, 0],
            current_top: 0,
        }
    }

    fn get_pattern(&self) -> Vec<u64> {
        let bottom = self.top_ys.iter().min().unwrap();
        self.top_ys.iter().map(|y| y - bottom).collect::<Vec<_>>()
    }

    fn update(&mut self, point: &Point) {
        let column = point.x as usize;
        if self.top_ys[column] < point.y {
            self.top_ys[column] = point.y;
        }
        if point.y > self.current_top {
            self.current_top = point.y;
        }
    }
}

fn draw(rocks: &HashSet<Point>) {
    let maxy = rocks.iter().map(|p| p.y).max().unwrap();
    let miny = rocks.iter().map(|p| p.y).min().unwrap();

    for y in (miny..=maxy).rev() {
        for x in 0..7 {
            if rocks.contains(&Point { x: x, y: y }) {
                print!("#")
            } else {
                print!(".")
            }
        }
        println!("");
    }
}

fn move_shape_down(rock: &HashSet<Point>, all_rocks: &HashSet<Point>) -> Option<HashSet<Point>> {
    let mut moved_shape: HashSet<Point> = HashSet::new();
    for p in rock.iter() {
        let new_p = Point { x: p.x, y: p.y - 1 };
        if new_p.y <= 0 || all_rocks.contains(&new_p) {
            return None;
        }
        moved_shape.insert(new_p);
    }
    return Some(moved_shape);
}

fn get_moved_shape(
    rock: &HashSet<Point>,
    all_rocks: &HashSet<Point>,
    left: bool,
) -> Option<HashSet<Point>> {
    let mut moved_shape: HashSet<Point> = HashSet::new();
    for p in rock.iter() {
        let new_x = if left { p.x - 1 } else { p.x + 1 };
        let new_p = Point { x: new_x, y: p.y };
        if new_p.x < 0 || new_p.x > 6 || all_rocks.contains(&new_p) {
            return None;
        }
        moved_shape.insert(new_p);
    }
    return Some(moved_shape);
}

fn get_new_shape(shape: &Shape, y: u64) -> HashSet<Point> {
    match shape {
        Shape::HorizontalLine => vec![
            Point { x: 2, y: y },
            Point { x: 3, y: y },
            Point { x: 4, y: y },
            Point { x: 5, y: y },
        ],
        Shape::Cross => vec![
            Point { x: 3, y: y + 2 },
            Point { x: 2, y: y + 1 },
            Point { x: 3, y: y + 1 },
            Point { x: 4, y: y + 1 },
            Point { x: 3, y: y },
        ],
        Shape::L => vec![
            Point { x: 4, y: y + 2 },
            Point { x: 4, y: y + 1 },
            Point { x: 4, y: y },
            Point { x: 3, y: y },
            Point { x: 2, y: y },
        ],
        Shape::VerticalLine => vec![
            Point { x: 2, y: y + 3 },
            Point { x: 2, y: y + 2 },
            Point { x: 2, y: y + 1 },
            Point { x: 2, y: y },
        ],
        Shape::Box => vec![
            Point { x: 2, y: y + 1 },
            Point { x: 3, y: y + 1 },
            Point { x: 2, y: y },
            Point { x: 3, y: y },
        ],
    }
    .into_iter()
    .collect::<HashSet<_>>()
}

#[derive(Clone, Debug, Hash, Eq, PartialEq)]
struct Point {
    x: u64,
    y: u64,
}

#[derive(Clone, Debug, Hash, Eq, PartialEq)]
enum Shape {
    HorizontalLine,
    Cross,
    L,
    VerticalLine,
    Box,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_top_pattern_at_bottom() {
        let mut p = TopPattern::new();
        p.top_ys[3] = 5;
        p.top_ys[2] = 3;
        assert_eq!(p.get_pattern(), vec![0, 0, 3, 5, 0, 0, 0]);
    }

    #[test]
    fn test_top_pattern() {
        let mut p = TopPattern::new();
        p.top_ys[0] = 5;
        p.top_ys[1] = 8;
        p.top_ys[2] = 7;
        p.top_ys[3] = 14;
        p.top_ys[4] = 11;
        p.top_ys[5] = 20;
        p.top_ys[6] = 9;
        assert_eq!(p.get_pattern(), vec![0, 3, 2, 9, 6, 15, 4]);
    }

    #[test]
    fn test_top_pattern_two_equals() {
        let mut p = TopPattern::new();
        p.update(&Point { x: 0, y: 5 });
        p.top_ys[1] = 8;
        p.top_ys[2] = 7;
        p.top_ys[3] = 14;
        p.top_ys[4] = 11;
        p.top_ys[5] = 20;
        p.top_ys[6] = 9;

        let mut p2 = TopPattern::new();
        p2.top_ys[0] = 15;
        p2.top_ys[1] = 18;
        p2.top_ys[2] = 17;
        p2.update(&Point { x: 3, y: 24 });
        p2.top_ys[4] = 21;
        p2.top_ys[5] = 30;
        p2.top_ys[6] = 19;
        assert_eq!(p.get_pattern(), p2.get_pattern());
    }
}
